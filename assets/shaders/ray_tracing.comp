#version 450
layout (binding = 2, rgba8) uniform image2D colorBuffer;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

struct Sphere {
    vec3 center;
    float radius;
    vec4 color;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

//layout(std140, binding = ) readonly buffer sphereBuffer {
//    int spheres_count;
//	Sphere spheres[];
//} SphereData;

bool hit(Ray ray, Sphere sphere);

void main() {
    ivec2 screen_pos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 screen_size = imageSize(colorBuffer);
    float horizontalCoefficient = (float(screen_pos.x) * 2 - screen_size.x) / screen_size.x;
    float verticalCoefficient = (float(screen_pos.y) * 2 - screen_size.y) / screen_size.x;

    vec4 pixel_color = vec4(0.5, 0.0, 0.25, 1.0);

    Camera camera;
    camera.position = vec3(0.0);
    camera.forwards = vec3(0.0, 0.0, 1.0);
    camera.right = vec3(1.0, 0.0, 0.0);
    camera.up = vec3(0.0, 1.0, 0.0);

    Sphere sphere;
    sphere.center = vec3(3.0, 0.0, 0.0);
    sphere.radius = 1.0;
    sphere.color = vec4(1.0, 0.3, 0.7, 1.0);

    Ray ray;
    ray.origin = camera.position;
    ray.direction = camera.forwards + horizontalCoefficient * camera.right + verticalCoefficient * camera.up;

    if (hit(ray, sphere)) {
        pixel_color = sphere.color;
    }

    imageStore(colorBuffer, screen_pos, pixel_color);
}

bool hit(Ray ray, Sphere sphere) {

    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, ray.origin - sphere.center);
    float c = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;
    float discriminant = b*b - 4.0*a*c;

    return discriminant > 0;
}
